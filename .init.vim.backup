" Better command-line completion
set wildmenu

" Show partial commands in the last line of the screen
set showcmd

set hidden

" Having longer updatetime (default is 4000 ms = 4 s) leads to noticeable
" delays and poor user experience.
set updatetime=300

"swap files not littering my normal dirs
set swapfile
set dir=~/tmp

" Highlight searches (use <C-L> to temporarily turn off highlighting; see the
" mapping of <C-L> below)
set hlsearch

" Display the cursor position on the last line of the screen or in the status
" line of a window
set ruler

" Use visual bell instead of beeping when doing something wrong
set visualbell

"showing clearly where cursor is
set cursorline
set cursorcolumn
"display current filename and path from home
"set laststatus=2

"display relative numbers but remain the one on the current line
set number
set relativenumber

"to enable mous
set mouse=a

"enable indentation
set foldmethod=indent
set foldlevel=99
set foldcolumn=0
"save and open folds
augroup remember_folds
  autocmd!
  au BufWinLeave ?* mkview 1
  au BufWinEnter ?* silent! loadview 1
augroup END

"fixing tabs
set tabstop=4
set softtabstop=4
set shiftwidth=4
set expandtab
set autoindent
set fileformat=unix

" Enable folding with the spacebar
let mapleader=" "
nnoremap <Leader>f za
"for quick editiong of .vimrc file
nnoremap <Leader>v :e ~/.config/nvim/init.vim<CR> 

"makefiles from vim
nnoremap <Leader>m :make<CR>

"for quick jumping to the end of a line
noremap <Leader>e $
"for quick jumping to first character of a line
noremap <Leader>w ^
"for quick access to clipboard since i use it very often
nnoremap <Leader>c "*
onoremap <Leader>c "*
"pasting the same thing in a row
xnoremap <leader>p "_dP

"for inserting only one character
nnoremap <C-i> li_<Esc>r
"for quick insert of a line in normal mode
nnoremap <Leader>o o<Esc>k
"browsing directories
nnoremap <Leader>l :Lex<CR>
"switching files with a simple shortcut
nnoremap <Leader>[ :bprevious<CR>
nnoremap <Leader>] :bnext<CR>
"deleting buffers
nnoremap <Leader>d :bdelete<CR>
nnoremap <Leader>D :bdelete!<CR>

"splitting windows
"and switching between split windows
nnoremap <Leader>s :call SplitOrSwitch()<CR>
function SplitOrSwitch()
	if winnr('$') == 1
		:vsplit<CR>
	else
		:wincmd w
	endif
endfunction

"also creating new tabs
nnoremap <Leader>n :tabnew<CR>

cnoremap !py !python3<Space>

"for quickly moving lines
nnoremap ∆ :m .+1<CR>==
nnoremap Ż :m .-2<CR>==
inoremap <A-j> <Esc>:m .+1<CR>==gi
inoremap <A-k> <Esc>:m .-2<CR>==gi
vnoremap <A-j> :m '>+1<CR>gv=gv
vnoremap <A-k> :m '<-2<CR>gv=gv
"better than escape
inoremap jj <Esc>

"idk why am i using this but i def had a reason
syntax on

set nocompatible              " required
filetype on                  " required
filetype plugin on

set directory="/tmp"

" set the runtime path to include Vundle and initialize
call plug#begin('~/.vim/plugged')

" add all your plugins here (note older versions of Vundle
" used Bundle instead of Plugin)
Plug 'vim-scripts/indentpython.vim'
"briefly highligts yanks
Plug 'machakann/vim-highlightedyank'
"autocomplete for python
"Bundle 'Valloric/YouCompleteMe'
Plug 'neoclide/coc.nvim', {'branch': 'release'}
"tex live preview and support
Plug 'lervag/vimtex'
"color scheme
Plug 'morhetz/gruvbox'
"previewving live .mds
Plug 'instant-markdown/vim-instant-markdown'
"previewving live .texs
"displaying all buffers
Plug 'vim-airline/vim-airline'
"easy text alignment
Plug 'junegunn/vim-easy-align'
"selecting intended blocks
Plug 'michaeljsmith/vim-indent-object'
" All of your Plugins must be added before the following line
" ...
call plug#end()

"=====================================
"morhetz/gruvbox
"=====================================
colorscheme gruvbox
highlight Visual cterm=NONE ctermbg=240 ctermfg=NONE guibg=Grey0

"=====================================
"neoclide/coc.nvim
"=====================================

set nobackup
set nowritebackup

set updatetime=300
" Use tab for trigger completion with characters ahead and navigate.
" NOTE: Use command ':verbose imap <tab>' to make sure tab is not mapped by
" other plugin before putting this into your config.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ CheckBackspace() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"
function! CheckBackspace() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction
" Use <c-space> to trigger completion.
if has('nvim')
  inoremap <silent><expr> <c-space> coc#refresh()
else
  inoremap <silent><expr> <c-@> coc#refresh()
endif

" Make <CR> auto-select the first completion item and notify coc.nvim to
" format on enter, <cr> could be remapped by other vim plugin
inoremap <silent><expr> <cr> pumvisible() ? coc#_select_confirm()
                              \: "\<C-g>u\<CR>\<c-r>=coc#on_enter()\<CR>"

" GoTo code navigation.
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <leader>qf  <Plug>(coc-fix-current)

" Use K to show documentation in preview window.
nnoremap <silent> K :call ShowDocumentation()<CR>


" Use space + g to show documentation in preview window.
nnoremap <silent><Leader>g  :call ShowDocumentation()<CR>
function! ShowDocumentation()
  if CocAction('hasProvider', 'hover')
    call CocActionAsync('doHover')
  else
    call feedkeys('K', 'in')
  endif
endfunction

" Symbol renaming.
nmap <Leader>rn <Plug>(coc-rename)

"=====================================
"instant-markdown/vim-instant-markdown
"=====================================
let g:instant_markdown_slow = 1
let g:instant_markdown_mathjax = 1
let g:instant_markdown_mermaid = 1

"=====================================
"lervag/vimtex
""=====================================
let g:tex_flavor='latex'
let g:vimtex_view_method = 'skim' 
let g:vimtex_view_skim_sync = 1
let g:vimtex_view_skim_activate = 1


"=====================================
" vim-airline /vim-airline 
"=====================================
let g:airline#extensions#tabline#enabled = 1

"=====================================
" junegunn/vim-easy-align
"=====================================
" Start interactive EasyAlign in visual mode (e.g. vipga)
xmap ga <Plug>(EasyAlign)
" Start interactive EasyAlign for a motion/text object (e.g. gaip)
nmap ga <Plug>(EasyAlign)

filetype plugin indent on    " required
